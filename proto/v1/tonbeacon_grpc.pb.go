// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/v1/tonbeacon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TonBeacon_CreateAccount_FullMethodName = "/tonbeacon.v1.TonBeacon/CreateAccount"
	TonBeacon_CloseAccount_FullMethodName  = "/tonbeacon.v1.TonBeacon/CloseAccount"
	TonBeacon_GetBalance_FullMethodName    = "/tonbeacon.v1.TonBeacon/GetBalance"
)

// TonBeaconClient is the client API for TonBeacon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TonBeaconClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
}

type tonBeaconClient struct {
	cc grpc.ClientConnInterface
}

func NewTonBeaconClient(cc grpc.ClientConnInterface) TonBeaconClient {
	return &tonBeaconClient{cc}
}

func (c *tonBeaconClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, TonBeacon_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tonBeaconClient) CloseAccount(ctx context.Context, in *CloseAccountRequest, opts ...grpc.CallOption) (*CloseAccountResponse, error) {
	out := new(CloseAccountResponse)
	err := c.cc.Invoke(ctx, TonBeacon_CloseAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tonBeaconClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, TonBeacon_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TonBeaconServer is the server API for TonBeacon service.
// All implementations must embed UnimplementedTonBeaconServer
// for forward compatibility
type TonBeaconServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	mustEmbedUnimplementedTonBeaconServer()
}

// UnimplementedTonBeaconServer must be embedded to have forward compatible implementations.
type UnimplementedTonBeaconServer struct {
}

func (UnimplementedTonBeaconServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedTonBeaconServer) CloseAccount(context.Context, *CloseAccountRequest) (*CloseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (UnimplementedTonBeaconServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedTonBeaconServer) mustEmbedUnimplementedTonBeaconServer() {}

// UnsafeTonBeaconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TonBeaconServer will
// result in compilation errors.
type UnsafeTonBeaconServer interface {
	mustEmbedUnimplementedTonBeaconServer()
}

func RegisterTonBeaconServer(s grpc.ServiceRegistrar, srv TonBeaconServer) {
	s.RegisterService(&TonBeacon_ServiceDesc, srv)
}

func _TonBeacon_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonBeaconServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonBeacon_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonBeaconServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TonBeacon_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonBeaconServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonBeacon_CloseAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonBeaconServer).CloseAccount(ctx, req.(*CloseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TonBeacon_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TonBeaconServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TonBeacon_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TonBeaconServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TonBeacon_ServiceDesc is the grpc.ServiceDesc for TonBeacon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TonBeacon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tonbeacon.v1.TonBeacon",
	HandlerType: (*TonBeaconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _TonBeacon_CreateAccount_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _TonBeacon_CloseAccount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _TonBeacon_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/tonbeacon.proto",
}
