version: "3.8"

services:
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - tonbeacon-network
    ports:
      - "6061:6060"    
    environment:
      - TONBEACON_LOG_LEVEL=debug
      - TONBEACON_PPROF=:6060
      - TONBEACON_PUBLISHER_TYPE=kafka
      - TONBEACON_KAFKA_BROKERS=kafka:9092
      - TONBEACON_KAFKA_TOPIC=ton_transactions
      - TONBEACON_KAFKA_MAX_RETRIES=3
      - TONBEACON_KAFKA_REQUIRED_ACKS=1
      - TONBEACON_SCANNING_NUM_WORKERS=40
      - TONBEACON_TON_URL=https://tonutils.com/testnet-global.config.json
    depends_on:
      - kafka
      - topic-creator
    restart: unless-stopped
    command: ["./scanner"]

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - tonbeacon-network
    ports:
      - "6062:6060"    
    environment:
      - TONBEACON_LOG_LEVEL=debug
      - TONBEACON_PPROF=:6060
      - TONBEACON_ENABLE_KAFKA_CONSUMER=true
      - TONBEACON_KAFKA_CONSUMER_BROKERS=kafka:9092
      - TONBEACON_KAFKA_CONSUMER_TOPIC=ton_transactions
      - TONBEACON_KAFKA_CONSUMER_GROUP_ID=tonbeacon
      - TONBEACON_KAFKA_CONSUMER_CONSUMER_MAX_RETRIES=3
      - TONBEACON_KAFKA_CONSUMER_CONSUMER_REQUIRED_ACKS=1
    depends_on:
      - scanner
    restart: unless-stopped
    command: ["./consumer --outbox-consumer true --kafka-consumer true"]

  postgres:
    image: postgres:15
    networks:
      - tonbeacon-network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: tonbeacon
      POSTGRES_PASSWORD: tonbeacon
      POSTGRES_DB: tonbeacon
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  flyway:
    image: flyway/flyway:9
    networks:
      - tonbeacon-network
    depends_on:
      - postgres
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "flyway -url=jdbc:postgresql://postgres:5432/tonbeacon -user=tonbeacon -password=tonbeacon -locations=filesystem:/flyway/sql migrate"
    volumes:
      - ./migrations:/flyway/sql
    restart: "on-failure"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    networks:
      - tonbeacon-network
    ports:
      - "9092:9092"
      - "19092:19092" 
    environment:
      CLUSTER_ID: MTIzNDU2Nzg5MDEyMzQ1Nj
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:19092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    healthcheck:
      test: ["CMD", "/usr/bin/kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    networks:
      - tonbeacon-network
    ports:
      - "8081:8080" 
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - kafka
    restart: unless-stopped

  topic-creator:
    image: confluentinc/cp-kafka:7.5.0
    networks:
      - tonbeacon-network
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "until /usr/bin/kafka-topics --list --bootstrap-server kafka:9092; do
       echo 'waiting for kafka to be ready';
       sleep 2;
       done;
       /usr/bin/kafka-topics --create --topic ton_transactions --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1;
       /usr/bin/kafka-topics --create --topic outbox_events --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1;
       echo 'kafka topic created';
       exit 0"
    restart: "on-failure"

volumes:
  kafka_data:
  postgres_data:

networks:
  tonbeacon-network:
    driver: bridge