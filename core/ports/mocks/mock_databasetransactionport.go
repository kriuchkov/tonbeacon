// Code generated by mockery v2.52.3. DO NOT EDIT.

package portsmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabaseTransactionPort is an autogenerated mock type for the DatabaseTransactionPort type
type MockDatabaseTransactionPort struct {
	mock.Mock
}

type MockDatabaseTransactionPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseTransactionPort) EXPECT() *MockDatabaseTransactionPort_Expecter {
	return &MockDatabaseTransactionPort_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *MockDatabaseTransactionPort) Begin(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabaseTransactionPort_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockDatabaseTransactionPort_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabaseTransactionPort_Expecter) Begin(ctx interface{}) *MockDatabaseTransactionPort_Begin_Call {
	return &MockDatabaseTransactionPort_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockDatabaseTransactionPort_Begin_Call) Run(run func(ctx context.Context)) *MockDatabaseTransactionPort_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabaseTransactionPort_Begin_Call) Return(_a0 context.Context, _a1 error) *MockDatabaseTransactionPort_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabaseTransactionPort_Begin_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockDatabaseTransactionPort_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *MockDatabaseTransactionPort) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseTransactionPort_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockDatabaseTransactionPort_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabaseTransactionPort_Expecter) Commit(ctx interface{}) *MockDatabaseTransactionPort_Commit_Call {
	return &MockDatabaseTransactionPort_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockDatabaseTransactionPort_Commit_Call) Run(run func(ctx context.Context)) *MockDatabaseTransactionPort_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabaseTransactionPort_Commit_Call) Return(_a0 error) *MockDatabaseTransactionPort_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseTransactionPort_Commit_Call) RunAndReturn(run func(context.Context) error) *MockDatabaseTransactionPort_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *MockDatabaseTransactionPort) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseTransactionPort_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockDatabaseTransactionPort_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabaseTransactionPort_Expecter) Rollback(ctx interface{}) *MockDatabaseTransactionPort_Rollback_Call {
	return &MockDatabaseTransactionPort_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockDatabaseTransactionPort_Rollback_Call) Run(run func(ctx context.Context)) *MockDatabaseTransactionPort_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabaseTransactionPort_Rollback_Call) Return(_a0 error) *MockDatabaseTransactionPort_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseTransactionPort_Rollback_Call) RunAndReturn(run func(context.Context) error) *MockDatabaseTransactionPort_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// WithInTransaction provides a mock function with given fields: ctx, f
func (_m *MockDatabaseTransactionPort) WithInTransaction(ctx context.Context, f func(context.Context) error) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for WithInTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabaseTransactionPort_WithInTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithInTransaction'
type MockDatabaseTransactionPort_WithInTransaction_Call struct {
	*mock.Call
}

// WithInTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(context.Context) error
func (_e *MockDatabaseTransactionPort_Expecter) WithInTransaction(ctx interface{}, f interface{}) *MockDatabaseTransactionPort_WithInTransaction_Call {
	return &MockDatabaseTransactionPort_WithInTransaction_Call{Call: _e.mock.On("WithInTransaction", ctx, f)}
}

func (_c *MockDatabaseTransactionPort_WithInTransaction_Call) Run(run func(ctx context.Context, f func(context.Context) error)) *MockDatabaseTransactionPort_WithInTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockDatabaseTransactionPort_WithInTransaction_Call) Return(_a0 error) *MockDatabaseTransactionPort_WithInTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabaseTransactionPort_WithInTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockDatabaseTransactionPort_WithInTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabaseTransactionPort creates a new instance of MockDatabaseTransactionPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseTransactionPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseTransactionPort {
	mock := &MockDatabaseTransactionPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
