// Code generated by mockery v2.52.3. DO NOT EDIT.

package portsmocks

import (
	context "context"

	model "github.com/kriuchkov/tonbeacon/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionalDatabasePort is an autogenerated mock type for the TransactionalDatabasePort type
type MockTransactionalDatabasePort struct {
	mock.Mock
}

type MockTransactionalDatabasePort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionalDatabasePort) EXPECT() *MockTransactionalDatabasePort_Expecter {
	return &MockTransactionalDatabasePort_Expecter{mock: &_m.Mock}
}

// InsertTransaction provides a mock function with given fields: ctx, tx
func (_m *MockTransactionalDatabasePort) InsertTransaction(ctx context.Context, tx *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransaction")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) (*model.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) *model.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionalDatabasePort_InsertTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTransaction'
type MockTransactionalDatabasePort_InsertTransaction_Call struct {
	*mock.Call
}

// InsertTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *model.Transaction
func (_e *MockTransactionalDatabasePort_Expecter) InsertTransaction(ctx interface{}, tx interface{}) *MockTransactionalDatabasePort_InsertTransaction_Call {
	return &MockTransactionalDatabasePort_InsertTransaction_Call{Call: _e.mock.On("InsertTransaction", ctx, tx)}
}

func (_c *MockTransactionalDatabasePort_InsertTransaction_Call) Run(run func(ctx context.Context, tx *model.Transaction)) *MockTransactionalDatabasePort_InsertTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Transaction))
	})
	return _c
}

func (_c *MockTransactionalDatabasePort_InsertTransaction_Call) Return(_a0 *model.Transaction, _a1 error) *MockTransactionalDatabasePort_InsertTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionalDatabasePort_InsertTransaction_Call) RunAndReturn(run func(context.Context, *model.Transaction) (*model.Transaction, error)) *MockTransactionalDatabasePort_InsertTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionalDatabasePort creates a new instance of MockTransactionalDatabasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionalDatabasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionalDatabasePort {
	mock := &MockTransactionalDatabasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
